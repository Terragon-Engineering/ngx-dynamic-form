!function(n,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common"),require("ng2-datepicker")):"function"==typeof define&&define.amd?define(["exports","@angular/core","@angular/forms","@angular/common","ng2-datepicker"],o):o(n.ngxDynamicForm={},n.ng.core,n.ng.forms,n.ng.common,n.ng2Datepicker)}(this,function(n,o,e,t,r){"use strict";var i=function(){function n(){}return n.decorators=[{type:o.Component,args:[{selector:"form-input",styles:["\n       input[type='submit'] {\n           margin-top: 0.5rem 1rem;\n       }\n\n       .form-input {\n           padding: 0.5rem 1rem;\n       }\n\n       .btn-dcb-info {\n           color: #045B6B;\n           background-color: white;\n           border-color: #045B6B;\n       }\n\n       .btn-search {\n           width: 100px;\n       }\n\n       .btn-danger {\n           background-color: #A88199;\n           border-color: whitesmoke;\n       }\n     "],template:'\n       <div *ngIf=\'!config.hidden\' class="form-input" [ngClass]="config.divClass" [formGroup]="formGroup">\n           <label *ngIf="config.label && config.label!=\'\'">{{ config.label }}</label>\n           <input *ngIf="config.type ===\'input\' && !config.fromEnum " value={{config.text}} [disabled]="config.disabled" type={{config.inputType}} [ngClass]="config.class" [attr.placeholder]="config.placeholder" [formControlName]="config.name" />\n\n           <select *ngIf="config.type===\'select\' && !config.fromEnum && !config.hidden" [formControlName]="config.name" [ngClass]=config.class>\n                        <option value=\'\' [selected]="true">{{ config.placeholder }}</option>\n                        <option value={{option}}\n                                *ngFor="let option of config.options">\n                                {{option}}\n                        </option>\n               </select>\n           <select *ngIf="config.type===\'select\' && config.fromEnum && !config.hidden" [formControlName]="config.name" [ngClass]=config.class>\n                    <option value="" [selected]="true">{{ config.placeholder }}</option>\n                    <option value={{config.options[0][i]}}\n                            *ngFor="let o of config.options[0]; let i=index">\n                            {{ config.options[1][i] }}\n                    </option>\n                </select>\n\n           <textarea *ngIf="config.type===\'textarea\' && !config.hidden" [formControlName]="config.name" [attr.placeholder]="config.placeholder" rows={{config.rows}} cols={{config.cols}}></textarea>\n\n           <ng-datepicker [ngClass]="config.class" *ngIf="config.type ===\'date\'" [formControlName]="config.name"></ng-datepicker>\n       </div>\n     '}]}],n.ctorParameters=function(){return[]},n}(),c=function(){function n(){}return n.prototype.enumToArray=function(n){var o=[],e=[],t=[];return Object.keys(n).forEach(function(n){var t=parseInt(n,10);isNaN(t)?e.push([n]):o.push(t)}),t[0]=o,t[1]=e,t},n.decorators=[{type:o.Component,args:[{selector:"form-select",styles:["\n\n  "],template:'\n    <div *ngIf=\'!config.hidden\' [ngClass]="config.divClass" [formGroup]="formGroup">\n        <div class="dynamic-field form-select">\n            <select *ngIf="!config.enum" [hidden]=\'config.hidden\' [formControlName]="config.name" [ngClass]=config.class>\n                    <option value=\'\' [selected]="true">{{ config.placeholder }}</option>\n                    <option *ngFor="let option of config.options"\n                            [value]=\'option\'>\n                            {{option}}\n                    </option>\n\n            </select>\n            <select *ngIf="config.enum">\n                    <option *ngFor="let o of enumToArray(config.enum)[0]; let i=index"\n                            [value]=\'enumToArray(config.enum)[0][i]\'>\n                            {{ enumToArray(config.enum)[1][i] }}\n                    </option>\n            </select>\n        </div>\n    </div>\n  '}]}],n.ctorParameters=function(){return[]},n}(),a=function(){function n(){}return n.prototype.handleFileUpload=function(n){this.formGroup.controls[this.config.name].setValue(this.config.multiple?n.currentTarget.files:n.currentTarget.files[0],{onlySelf:!0})},n.decorators=[{type:o.Component,args:[{selector:"form-file-upload",styles:["\n\n  "],template:'\n    <div *ngIf=\'!config.hidden\' [ngClass]="config.divClass" [formGroup]="formGroup">\n        <div class="dynamic-field form-select">\n            <input [disabled]="config.disabled" type=\'file\' (change)=\'handleFileUpload($event)\' [accept]="config.accept" [ngClass]="config.class" [attr.placeholder]="config.placeholder" />\n        </div>\n    </div>\n  '}]}],n.ctorParameters=function(){return[]},n}(),s=function(){function n(){}return n.prototype.ngOnInit=function(){this.formGroup.controls[this.config.name].setValue(new Date,{onlySelf:!0})},n.decorators=[{type:o.Component,args:[{selector:"form-datetime",styles:["\n\n  "],template:'\n    <div *ngIf=\'!config.hidden\' [ngClass]="config.divClass" [formGroup]="formGroup">\n        <div class="dynamic-field form-datetime">\n            <ng-datepicker [formControlName]="config.name"></ng-datepicker>\n\n        </div>\n    </div>\n  '}]}],n.ctorParameters=function(){return[]},n}(),f=function(){function n(){}return n.decorators=[{type:o.Component,args:[{selector:"form-button",styles:["\n\n  "],template:'\n    <div *ngIf=\'!config.hidden\' class="form-input" [ngClass]="config.divClass" [formGroup]="formGroup">\n        <div class="dynamic-field form-button">\n            <button [disabled]="config.disabled" type="submit">\n            {{ config.text }}\n            </button>\n        </div>\n    </div>\n  '}]}],n.ctorParameters=function(){return[]},n}(),l=function(){function n(n){this.fb=n,this.config=[],this.submit=new o.EventEmitter}return Object.defineProperty(n.prototype,"controls",{get:function(){return this.config.filter(function(n){return"button"!==n.type})},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"changes",{get:function(){return this.form.valueChanges},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"valid",{get:function(){return this.form.valid},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"value",{get:function(){return this.form.value},enumerable:!0,configurable:!0}),n.prototype.reset=function(){this.form.reset()},n.prototype.ngOnInit=function(){this.form=this.createGroup(),console.log(this.field)},n.prototype.createGroup=function(){var n=this,o=this.fb.group({});return this.config.forEach(function(e){o.addControl(e.name,n.createControl(e))}),o},n.prototype.createControl=function(n){var o=n.disabled,e=n.validation,t=n.value;return this.fb.control({disabled:o,value:t},e)},n.prototype.handleSubmit=function(n){n.preventDefault(),n.stopPropagation(),this.submit.emit(this.value)},n.prototype.setDisabled=function(n,o){if(this.form.controls[n]){var e=o?"disable":"enable";this.form.controls[n][e]()}else this.config=this.config.map(function(e){return e.name===n&&(e.disabled=o),e})},n.prototype.setValue=function(n,o){this.form.controls[n].setValue(o,{emitEvent:!0})},n.decorators=[{type:o.Component,args:[{exportAs:"dynamicForm",selector:"dynamic-form",template:'\n       <form [formGroup]="form" #newForm="ngForm" (ngSubmit)="handleSubmit($event)">\n           <div class="row">\n               <ng-container dynamicField *ngFor="let field of config" class="field.divClass" [config]="field" [formGroup]="form">\n               </ng-container>\n           </div>\n       </form>\n     '}]}],n.ctorParameters=function(){return[{type:e.FormBuilder}]},n.propDecorators={config:[{type:o.Input}],submit:[{type:o.Output}]},n}(),p={button:f,input:i,select:c,file:a,date:s},u=function(){function n(n,o){this.resolver=n,this.vcr=o}return n.prototype.ngOnInit=function(){if(!p[this.config.type]){var n=Object.keys(p).join(", ");throw new Error("Trying to use an unsupported type ("+this.config.type+").\n              Supported types: "+n)}var o=p[this.config.type],e=this.resolver.resolveComponentFactory(o);this.component=this.vcr.createComponent(e),this.component.instance.config=this.config,this.component.instance.formGroup=this.formGroup},n.prototype.ngOnChanges=function(n){this.component&&(this.component.instance.config=this.config,this.component.instance.formGroup=this.formGroup)},n.decorators=[{type:o.Directive,args:[{selector:"[dynamicField]"}]}],n.ctorParameters=function(){return[{type:o.ComponentFactoryResolver},{type:o.ViewContainerRef}]},n.propDecorators={config:[{type:o.Input}],formGroup:[{type:o.Input}]},n}(),m=function(){function n(){}return n.decorators=[{type:o.NgModule,args:[{imports:[t.CommonModule,e.FormsModule,r.NgDatepickerModule,e.ReactiveFormsModule],declarations:[u,l,i,c,a,s,f],providers:[],exports:[r.NgDatepickerModule,l],schemas:[o.CUSTOM_ELEMENTS_SCHEMA],entryComponents:[i,c,a,s,f]}]}],n.ctorParameters=function(){return[]},n}();n.FormInputComponent=i,n.FormSelectComponent=c,n.FormFileUploadComponent=a,n.FormDatetimeComponent=s,n.FormButtonComponent=f,n.DynamicFormComponent=l,n.DynamicAddFieldDirective=u,n.DynamicFormModule=m,Object.defineProperty(n,"__esModule",{value:!0})});